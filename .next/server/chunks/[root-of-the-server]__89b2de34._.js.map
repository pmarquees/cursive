{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///Users/pedromarques/Dev/cursor/cursive/src/app/api/workspace-assets/%5B...path%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport fs from 'fs/promises';\nimport path from 'path';\n\nconst WORKSPACE_DIR = path.join(process.cwd(), 'workspace');\n\n// GET - Serve static files from workspace directory\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ path: string[] }> }\n) {\n  const resolvedParams = await params;\n  try {\n    console.log('Workspace Assets GET - raw params:', resolvedParams);\n    console.log('Workspace Assets GET - URL:', request.url);\n    \n    // Extract the actual file path from the URL\n    const url = new URL(request.url);\n    const pathSegments = url.pathname.split('/');\n    console.log('Workspace Assets GET - URL path segments:', pathSegments);\n    \n    // Find the index of 'workspace-assets' and get everything after it\n    const workspaceAssetsIndex = pathSegments.indexOf('workspace-assets');\n    if (workspaceAssetsIndex === -1 || workspaceAssetsIndex === pathSegments.length - 1) {\n      console.log('Workspace Assets GET - Invalid path structure');\n      return NextResponse.json({ error: 'Invalid path' }, { status: 400 });\n    }\n    \n    const filePath = pathSegments.slice(workspaceAssetsIndex + 1).join('/');\n    const fullPath = path.join(WORKSPACE_DIR, filePath);\n    \n    console.log('Workspace Assets GET - extracted filePath:', filePath);\n    console.log('Workspace Assets GET - fullPath:', fullPath);\n    console.log('Workspace Assets GET - WORKSPACE_DIR:', WORKSPACE_DIR);\n    \n    // Security check\n    if (!fullPath.startsWith(WORKSPACE_DIR)) {\n      console.log('Workspace Assets GET - Security check failed');\n      return NextResponse.json({ error: 'Invalid path' }, { status: 400 });\n    }\n    \n    // Check if file exists\n    try {\n      await fs.access(fullPath);\n      console.log('Workspace Assets GET - File exists');\n    } catch (error) {\n      console.log('Workspace Assets GET - File not found:', error);\n      return NextResponse.json({ error: 'File not found' }, { status: 404 });\n    }\n    \n    // Read file content\n    const content = await fs.readFile(fullPath);\n    \n    // Determine content type based on file extension\n    const ext = path.extname(filePath).toLowerCase();\n    let contentType = 'text/plain';\n    \n    switch (ext) {\n      case '.css':\n        contentType = 'text/css';\n        break;\n      case '.js':\n        contentType = 'application/javascript';\n        break;\n      case '.html':\n        contentType = 'text/html';\n        break;\n      case '.json':\n        contentType = 'application/json';\n        break;\n      case '.png':\n        contentType = 'image/png';\n        break;\n      case '.jpg':\n      case '.jpeg':\n        contentType = 'image/jpeg';\n        break;\n      case '.gif':\n        contentType = 'image/gif';\n        break;\n      case '.svg':\n        contentType = 'image/svg+xml';\n        break;\n      case '.ico':\n        contentType = 'image/x-icon';\n        break;\n    }\n    \n    return new NextResponse(content, {\n      headers: {\n        'Content-Type': contentType,\n        'Cache-Control': 'no-cache', // Disable caching for development\n      },\n    });\n  } catch (error) {\n    console.error('Error serving workspace asset:', error);\n    return NextResponse.json({ error: 'Failed to serve file' }, { status: 500 });\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEA,MAAM,gBAAgB,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;AAGxC,eAAe,IACpB,OAAoB,EACpB,EAAE,MAAM,EAA2C;IAEnD,MAAM,iBAAiB,MAAM;IAC7B,IAAI;QACF,QAAQ,GAAG,CAAC,sCAAsC;QAClD,QAAQ,GAAG,CAAC,+BAA+B,QAAQ,GAAG;QAEtD,4CAA4C;QAC5C,MAAM,MAAM,IAAI,IAAI,QAAQ,GAAG;QAC/B,MAAM,eAAe,IAAI,QAAQ,CAAC,KAAK,CAAC;QACxC,QAAQ,GAAG,CAAC,6CAA6C;QAEzD,mEAAmE;QACnE,MAAM,uBAAuB,aAAa,OAAO,CAAC;QAClD,IAAI,yBAAyB,CAAC,KAAK,yBAAyB,aAAa,MAAM,GAAG,GAAG;YACnF,QAAQ,GAAG,CAAC;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAe,GAAG;gBAAE,QAAQ;YAAI;QACpE;QAEA,MAAM,WAAW,aAAa,KAAK,CAAC,uBAAuB,GAAG,IAAI,CAAC;QACnE,MAAM,WAAW,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,eAAe;QAE1C,QAAQ,GAAG,CAAC,8CAA8C;QAC1D,QAAQ,GAAG,CAAC,oCAAoC;QAChD,QAAQ,GAAG,CAAC,yCAAyC;QAErD,iBAAiB;QACjB,IAAI,CAAC,SAAS,UAAU,CAAC,gBAAgB;YACvC,QAAQ,GAAG,CAAC;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAe,GAAG;gBAAE,QAAQ;YAAI;QACpE;QAEA,uBAAuB;QACvB,IAAI;YACF,MAAM,qHAAA,CAAA,UAAE,CAAC,MAAM,CAAC;YAChB,QAAQ,GAAG,CAAC;QACd,EAAE,OAAO,OAAO;YACd,QAAQ,GAAG,CAAC,0CAA0C;YACtD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACtE;QAEA,oBAAoB;QACpB,MAAM,UAAU,MAAM,qHAAA,CAAA,UAAE,CAAC,QAAQ,CAAC;QAElC,iDAAiD;QACjD,MAAM,MAAM,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,UAAU,WAAW;QAC9C,IAAI,cAAc;QAElB,OAAQ;YACN,KAAK;gBACH,cAAc;gBACd;YACF,KAAK;gBACH,cAAc;gBACd;YACF,KAAK;gBACH,cAAc;gBACd;YACF,KAAK;gBACH,cAAc;gBACd;YACF,KAAK;gBACH,cAAc;gBACd;YACF,KAAK;YACL,KAAK;gBACH,cAAc;gBACd;YACF,KAAK;gBACH,cAAc;gBACd;YACF,KAAK;gBACH,cAAc;gBACd;YACF,KAAK;gBACH,cAAc;gBACd;QACJ;QAEA,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,SAAS;YAC/B,SAAS;gBACP,gBAAgB;gBAChB,iBAAiB;YACnB;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAChD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAuB,GAAG;YAAE,QAAQ;QAAI;IAC5E;AACF","debugId":null}}]
}