{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///Users/pedromarques/Dev/cursor/cursive/src/app/api/files/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport fs from 'fs/promises';\nimport path from 'path';\n\nconst WORKSPACE_DIR = path.join(process.cwd(), 'workspace');\n\n// Ensure workspace directory exists\nasync function ensureWorkspaceDir() {\n  try {\n    await fs.access(WORKSPACE_DIR);\n  } catch {\n    await fs.mkdir(WORKSPACE_DIR, { recursive: true });\n  }\n}\n\n// GET - List files and directories\nexport async function GET(request: NextRequest) {\n  try {\n    await ensureWorkspaceDir();\n    \n    const { searchParams } = new URL(request.url);\n    const dirPath = searchParams.get('path') || '';\n    const fullPath = path.join(WORKSPACE_DIR, dirPath);\n    \n    // Security check - ensure path is within workspace\n    if (!fullPath.startsWith(WORKSPACE_DIR)) {\n      return NextResponse.json({ error: 'Invalid path' }, { status: 400 });\n    }\n    \n    const items = await fs.readdir(fullPath, { withFileTypes: true });\n    const fileList = await Promise.all(\n      items.map(async (item) => {\n        const itemPath = path.join(fullPath, item.name);\n        const relativePath = path.relative(WORKSPACE_DIR, itemPath);\n        \n        if (item.isDirectory()) {\n          return {\n            name: item.name,\n            type: 'directory',\n            path: relativePath,\n          };\n        } else {\n          const content = await fs.readFile(itemPath, 'utf-8');\n          return {\n            name: item.name,\n            type: 'file',\n            path: relativePath,\n            content,\n          };\n        }\n      })\n    );\n    \n    return NextResponse.json({ files: fileList });\n  } catch (error) {\n    console.error('Error listing files:', error);\n    return NextResponse.json({ error: 'Failed to list files' }, { status: 500 });\n  }\n}\n\n// POST - Create file or directory\nexport async function POST(request: NextRequest) {\n  try {\n    await ensureWorkspaceDir();\n    \n    const { name, type, content = '', path: filePath = '' } = await request.json();\n    \n    if (!name) {\n      return NextResponse.json({ error: 'Name is required' }, { status: 400 });\n    }\n    \n    const fullPath = path.join(WORKSPACE_DIR, filePath, name);\n    \n    // Security check\n    if (!fullPath.startsWith(WORKSPACE_DIR)) {\n      return NextResponse.json({ error: 'Invalid path' }, { status: 400 });\n    }\n    \n    // Ensure parent directory exists\n    await fs.mkdir(path.dirname(fullPath), { recursive: true });\n    \n    if (type === 'directory') {\n      await fs.mkdir(fullPath, { recursive: true });\n    } else {\n      await fs.writeFile(fullPath, content, 'utf-8');\n    }\n    \n    const relativePath = path.relative(WORKSPACE_DIR, fullPath);\n    \n    return NextResponse.json({\n      success: true,\n      file: {\n        name,\n        type: type || 'file',\n        path: relativePath,\n        content: type === 'file' ? content : undefined,\n      },\n    });\n  } catch (error) {\n    console.error('Error creating file:', error);\n    return NextResponse.json({ error: 'Failed to create file' }, { status: 500 });\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}