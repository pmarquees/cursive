"use strict";exports.id=801,exports.ids=[801],exports.modules={5801:(a,b,c)=>{c.r(b),c.d(b,{createFile:()=>g,deleteFile:()=>k,getWorkspaceMode:()=>f,listFiles:()=>j,readFile:()=>i,setWorkspaceMode:()=>e,updateFile:()=>h});let d="remote";function e(a){d=a,console.log("Workspace mode set to:",a)}function f(){return d}async function g(a,b){if(console.log("createFile called with mode:",d,"fileName:",a),"local"===d)return console.log("Returning local operation instructions for:",a),{success:!0,localOperation:!0,operation:"create",data:{fileName:a,content:b},fileName:a,content:b.slice(0,200)+(b.length>200?"...":""),message:`File ${a} will be created in local workspace`};console.log("Making API call for remote operation:",a);try{let c=await fetch("/api/files",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:a,type:"file",content:b,path:""})});if(!c.ok)throw Error("Failed to create file");return await c.json(),{success:!0,fileName:a,content:b.slice(0,200)+(b.length>200?"...":""),message:`Created file: ${a}`}}catch(a){return{success:!1,error:`Failed to create file: ${a instanceof Error?a.message:"Unknown error"}`}}}async function h(a,b){if("local"===d)return{success:!0,localOperation:!0,operation:"update",data:{fileName:a,content:b},fileName:a,content:b.slice(0,200)+(b.length>200?"...":""),message:`File ${a} will be updated in local workspace`};try{if(!(await fetch(`/api/files/${a}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify({content:b})})).ok)throw Error("Failed to update file");return{success:!0,fileName:a,content:b.slice(0,200)+(b.length>200?"...":""),message:`Updated file: ${a}`}}catch(a){return{success:!1,error:`Failed to update file: ${a instanceof Error?a.message:"Unknown error"}`}}}async function i(a){if("local"===d)return{success:!0,localOperation:!0,operation:"read",data:{fileName:a},fileName:a,content:"",message:`File ${a} will be read from local workspace`};try{let b=await fetch(`/api/files/${a}`);if(!b.ok)throw Error("Failed to read file");let c=await b.json();return{success:!0,fileName:a,content:c.content,message:`Read file: ${a}`}}catch(a){return{success:!1,error:`Failed to read file: ${a instanceof Error?a.message:"Unknown error"}`}}}async function j(a=""){if("local"===d)return{success:!0,localOperation:!0,operation:"list",data:{directory:a},files:[],directories:[],message:`Files will be listed from local workspace directory: ${a||"root"}`};try{let b=await fetch(`/api/files?path=${encodeURIComponent(a)}`);if(!b.ok)throw Error("Failed to list files");let c=await b.json(),d=c.files.filter(a=>"file"===a.type).map(a=>a.name),e=c.files.filter(a=>"directory"===a.type).map(a=>a.name);return{success:!0,files:d,directories:e,message:`Listed ${d.length} files and ${e.length} directories`}}catch(a){return{success:!1,error:`Failed to list files: ${a instanceof Error?a.message:"Unknown error"}`}}}async function k(a){if("local"===d)return{success:!0,localOperation:!0,operation:"delete",data:{fileName:a},fileName:a,message:`File ${a} will be deleted from local workspace`};try{if(!(await fetch(`/api/files/${a}`,{method:"DELETE"})).ok)throw Error("Failed to delete file");return{success:!0,fileName:a,message:`Deleted file: ${a}`}}catch(a){return{success:!1,error:`Failed to delete file: ${a instanceof Error?a.message:"Unknown error"}`}}}}};