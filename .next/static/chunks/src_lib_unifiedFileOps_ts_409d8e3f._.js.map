{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/pedromarques/Dev/cursor/cursive/src/lib/unifiedFileOps.ts"],"sourcesContent":["// Unified file operations - Client-side workspace mode management\n// This module handles client-side workspace mode without server dependencies\n\nexport interface FileOperationResult {\n  success: boolean;\n  error?: string;\n  fileName?: string;\n  content?: string;\n  files?: string[];\n  directories?: string[];\n  message?: string;\n  // For local operations, include instructions for client\n  localOperation?: boolean;\n  operation?: string;\n  data?: {\n    fileName?: string;\n    content?: string;\n    directory?: string;\n  };\n}\n\nlet currentWorkspaceMode: 'local' | 'remote' = 'remote';\n\nexport function setWorkspaceMode(mode: 'local' | 'remote') {\n  currentWorkspaceMode = mode;\n  console.log('Workspace mode set to:', mode);\n}\n\nexport function getWorkspaceMode(): 'local' | 'remote' {\n  return currentWorkspaceMode;\n}\n\n// These functions return instructions for local operations or make API calls for remote operations\nexport async function createFile(fileName: string, content: string): Promise<FileOperationResult> {\n  console.log('createFile called with mode:', currentWorkspaceMode, 'fileName:', fileName);\n  \n  if (currentWorkspaceMode === 'local') {\n    console.log('Returning local operation instructions for:', fileName);\n    // Return instructions for client-side execution\n    return {\n      success: true,\n      localOperation: true,\n      operation: 'create',\n      data: { fileName, content },\n      fileName,\n      content: content.slice(0, 200) + (content.length > 200 ? '...' : ''),\n      message: `File ${fileName} will be created in local workspace`\n    };\n  }\n  \n  console.log('Making API call for remote operation:', fileName);\n  // Make API call for remote operations\n  try {\n    const baseUrl = typeof window !== 'undefined' ? '' : 'http://localhost:3000';\n    const response = await fetch(`${baseUrl}/api/files`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        name: fileName,\n        type: 'file',\n        content,\n        path: ''\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to create file');\n    }\n\n    await response.json();\n    return {\n      success: true,\n      fileName,\n      content: content.slice(0, 200) + (content.length > 200 ? '...' : ''),\n      message: `Created file: ${fileName}`\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: `Failed to create file: ${error instanceof Error ? error.message : 'Unknown error'}`\n    };\n  }\n}\n\nexport async function updateFile(fileName: string, content: string): Promise<FileOperationResult> {\n  if (currentWorkspaceMode === 'local') {\n    return {\n      success: true,\n      localOperation: true,\n      operation: 'update',\n      data: { fileName, content },\n      fileName,\n      content: content.slice(0, 200) + (content.length > 200 ? '...' : ''),\n      message: `File ${fileName} will be updated in local workspace`\n    };\n  }\n\n  // Make API call for remote operations\n  try {\n    const baseUrl = typeof window !== 'undefined' ? '' : 'http://localhost:3000';\n    const response = await fetch(`${baseUrl}/api/files/${fileName}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ content }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to update file');\n    }\n\n    return {\n      success: true,\n      fileName,\n      content: content.slice(0, 200) + (content.length > 200 ? '...' : ''),\n      message: `Updated file: ${fileName}`\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: `Failed to update file: ${error instanceof Error ? error.message : 'Unknown error'}`\n    };\n  }\n}\n\nexport async function readFile(fileName: string): Promise<FileOperationResult> {\n  if (currentWorkspaceMode === 'local') {\n    return {\n      success: true,\n      localOperation: true,\n      operation: 'read',\n      data: { fileName },\n      fileName,\n      content: '', // Will be filled by client\n      message: `File ${fileName} will be read from local workspace`\n    };\n  }\n\n  // Make API call for remote operations\n  try {\n    const baseUrl = typeof window !== 'undefined' ? '' : 'http://localhost:3000';\n    const response = await fetch(`${baseUrl}/api/files/${fileName}`);\n    if (!response.ok) {\n      throw new Error('Failed to read file');\n    }\n\n    const result = await response.json();\n    return {\n      success: true,\n      fileName,\n      content: result.content,\n      message: `Read file: ${fileName}`\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: `Failed to read file: ${error instanceof Error ? error.message : 'Unknown error'}`\n    };\n  }\n}\n\nexport async function listFiles(directory: string = ''): Promise<FileOperationResult> {\n  if (currentWorkspaceMode === 'local') {\n    return {\n      success: true,\n      localOperation: true,\n      operation: 'list',\n      data: { directory },\n      files: [], // Will be filled by client\n      directories: [], // Will be filled by client\n      message: `Files will be listed from local workspace directory: ${directory || 'root'}`\n    };\n  }\n\n  // Make API call for remote operations\n  try {\n    const baseUrl = typeof window !== 'undefined' ? '' : 'http://localhost:3000';\n    const response = await fetch(`${baseUrl}/api/files?path=${encodeURIComponent(directory)}`);\n    if (!response.ok) {\n      throw new Error('Failed to list files');\n    }\n\n    interface FileItem {\n      name: string;\n      type: 'file' | 'directory';\n      path: string;\n      content?: string;\n    }\n    \n    interface ApiResponse {\n      files: FileItem[];\n    }\n    \n    const result = await response.json() as ApiResponse;\n    const files = result.files\n      .filter((item) => item.type === 'file')\n      .map((item) => item.name);\n      \n    const directories = result.files\n      .filter((item) => item.type === 'directory')\n      .map((item) => item.name);\n\n    return {\n      success: true,\n      files,\n      directories,\n      message: `Listed ${files.length} files and ${directories.length} directories`\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: `Failed to list files: ${error instanceof Error ? error.message : 'Unknown error'}`\n    };\n  }\n}\n\nexport async function deleteFile(fileName: string): Promise<FileOperationResult> {\n  if (currentWorkspaceMode === 'local') {\n    return {\n      success: true,\n      localOperation: true,\n      operation: 'delete',\n      data: { fileName },\n      fileName,\n      message: `File ${fileName} will be deleted from local workspace`\n    };\n  }\n\n  // Make API call for remote operations\n  try {\n    const baseUrl = typeof window !== 'undefined' ? '' : 'http://localhost:3000';\n    const response = await fetch(`${baseUrl}/api/files/${fileName}`, {\n      method: 'DELETE',\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to delete file');\n    }\n\n    return {\n      success: true,\n      fileName,\n      message: `Deleted file: ${fileName}`\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: `Failed to delete file: ${error instanceof Error ? error.message : 'Unknown error'}`\n    };\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}