"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[937],{9937:(e,t,o)=>{o.r(t),o.d(t,{createFile:()=>n,deleteFile:()=>f,getWorkspaceMode:()=>r,listFiles:()=>i,readFile:()=>l,setWorkspaceMode:()=>c,updateFile:()=>s});let a="remote";function c(e){a=e,console.log("Workspace mode set to:",e)}function r(){return a}async function n(e,t){if(console.log("createFile called with mode:",a,"fileName:",e),"local"===a)return console.log("Returning local operation instructions for:",e),{success:!0,localOperation:!0,operation:"create",data:{fileName:e,content:t},fileName:e,content:t.slice(0,200)+(t.length>200?"...":""),message:"File ".concat(e," will be created in local workspace")};console.log("Making API call for remote operation:",e);try{let o=await fetch("/api/files",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:e,type:"file",content:t,path:""})});if(!o.ok)throw Error("Failed to create file");return await o.json(),{success:!0,fileName:e,content:t.slice(0,200)+(t.length>200?"...":""),message:"Created file: ".concat(e)}}catch(e){return{success:!1,error:"Failed to create file: ".concat(e instanceof Error?e.message:"Unknown error")}}}async function s(e,t){if("local"===a)return{success:!0,localOperation:!0,operation:"update",data:{fileName:e,content:t},fileName:e,content:t.slice(0,200)+(t.length>200?"...":""),message:"File ".concat(e," will be updated in local workspace")};try{if(!(await fetch("/api/files/".concat(e),{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify({content:t})})).ok)throw Error("Failed to update file");return{success:!0,fileName:e,content:t.slice(0,200)+(t.length>200?"...":""),message:"Updated file: ".concat(e)}}catch(e){return{success:!1,error:"Failed to update file: ".concat(e instanceof Error?e.message:"Unknown error")}}}async function l(e){if("local"===a)return{success:!0,localOperation:!0,operation:"read",data:{fileName:e},fileName:e,content:"",message:"File ".concat(e," will be read from local workspace")};try{let t=await fetch("/api/files/".concat(e));if(!t.ok)throw Error("Failed to read file");let o=await t.json();return{success:!0,fileName:e,content:o.content,message:"Read file: ".concat(e)}}catch(e){return{success:!1,error:"Failed to read file: ".concat(e instanceof Error?e.message:"Unknown error")}}}async function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";if("local"===a)return{success:!0,localOperation:!0,operation:"list",data:{directory:e},files:[],directories:[],message:"Files will be listed from local workspace directory: ".concat(e||"root")};try{let t=await fetch("/api/files?path=".concat(encodeURIComponent(e)));if(!t.ok)throw Error("Failed to list files");let o=await t.json(),a=o.files.filter(e=>"file"===e.type).map(e=>e.name),c=o.files.filter(e=>"directory"===e.type).map(e=>e.name);return{success:!0,files:a,directories:c,message:"Listed ".concat(a.length," files and ").concat(c.length," directories")}}catch(e){return{success:!1,error:"Failed to list files: ".concat(e instanceof Error?e.message:"Unknown error")}}}async function f(e){if("local"===a)return{success:!0,localOperation:!0,operation:"delete",data:{fileName:e},fileName:e,message:"File ".concat(e," will be deleted from local workspace")};try{if(!(await fetch("/api/files/".concat(e),{method:"DELETE"})).ok)throw Error("Failed to delete file");return{success:!0,fileName:e,message:"Deleted file: ".concat(e)}}catch(e){return{success:!1,error:"Failed to delete file: ".concat(e instanceof Error?e.message:"Unknown error")}}}}}]);